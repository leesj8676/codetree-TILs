public class Main {
    public static void main(String[] args) {
        

        // 첫번째 : 문제 정의
        // n x n 격자에서 m 명의 사람들이 
        // 각자 동시에 우선순위에 맞게 이동
        // 이동한 자리가 주인이 없으면, k 턴동안 그사람이 소유권
        
        // 사람들은
        // 소유권이 없는 자리, 소유권이 있는 자리 순으로 이동

        // 남의 자리로 이동할 경우의수는 X, 
        // 격자 바깥도 아마 안가나 봄..

        // 이후, 같은 위치에 있는 사람들은 한명만 남고 다 사라짐
        // 한 명이 남을때까지의 시간을 출력

        // 두번째 : 함수, 변수 정의

        // 사람 클래스를 만드는게 편할듯.. 
        // person(r, c, index)
        // people 리스트에서는 남은 사람만 관리하기 (사라진 사람 디버깅 외에는 볼 필요 없음)

        //nxn 배열은 사람별 내가 소유하고 있는지, 언제까지 내건지 판단할 필요가 있겠음
        // 그것과 별개로, 겹치는지 확인할 필요는 있을듯.. -> 매 턴마다 nxn boolean 배열만 있으면 되겠음

        // 변수
        // person 클래스
        // alivePeople 리스트
        // arr[n][n][m+1] 사람별 가지고 있는 땅 (위치에 몇턴까지 내 땅인지 입력)
        // dr ,dc  상하좌우
        // n, m, k
        // directions[m][5] 사람별 각 방향에서 선호하는 다음 방향

        // 세번째 : 의사코드 작성
        // person 클래스
        // dr, dc
        // n, m, k 입력 받기

        // arr 선언하기
            // 각 사람별 현재 자기 위치는 k 로 설정 (k+1턴부터 비어있는 땅)
        // boolean arrThisTurn 선언하기(입력 x)

        // directions 선언
        // directions 입력받기

        // alivePeople 리스트 초기화

        // 무한 루프
            // 1000번째 턴이면, -1 출력 후 break

            // people 클래스 순서대로 실행
                // 현재위치 r, c 얻기
               // arrThisTurn = false 처리하기

                // 비어있는 곳 가는 지 확인 플래그 세우기
                // 4방탐색해서
                    // 격자 밖이면 continue;
                    // 격자 안이면서 비어있는 곳이면 플래그 세우고
                    // nr, nc 구하기
                // 플래그가 false면, 다시 4방탐색해서 nr, nc 구하기

                // 구한 nr, nc가 비어있는 곳이면
                // arr에 업데이트
                
                // arrThisTurn이 이미 true 이면, 해당 사람은 리스트에서 제거하기
                // i값 은 i-- 해주고 continue해야함
                
                // true가 아니면, true 처리 해주기

            // people클래스 사이즈가 1이면, 현재 턴 출력 후 break
    }
}